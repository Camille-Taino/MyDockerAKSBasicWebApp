# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: DockerCompose@0
  displayName: 'Build services'
  inputs:
    azureSubscription: 'Kubernetes Cluster Connection'
    azureContainerRegistry: '{"loginServer":"mydockerakscontainer13580.azurecr.io", "id" : "/subscriptions/590f9815-4379-4568-a5e9-9dbe425b826f/resourceGroups/hannah.c.m.taino-RG/providers/Microsoft.ContainerRegistry/registries/mydockerakscontainer13580"}'
    dockerComposeFile: 'MyBasicWebApp/docker-compose.yml'
    action: 'Build services'
    additionalImageTags: '$(Build.BuildId)'

- task: DockerCompose@0
  displayName: 'Push services'
  inputs:
    azureSubscription: 'Kubernetes Cluster Connection'
    azureContainerRegistry: '{"loginServer":"mydockerakscontainer13580.azurecr.io", "id" : "/subscriptions/590f9815-4379-4568-a5e9-9dbe425b826f/resourceGroups/hannah.c.m.taino-RG/providers/Microsoft.ContainerRegistry/registries/mydockerakscontainer13580"}'
    dockerComposeFile: 'MyBasicWebApp/docker-compose.yml'
    action: 'Push services'
    additionalImageTags: '$(Build.BuildId)'

- task: DockerCompose@0
  displayName: 'Lock services'
  inputs:
    azureSubscription: 'Kubernetes Cluster Connection'
    azureContainerRegistry: '{"loginServer":"mydockerakscontainer13580.azurecr.io", "id" : "/subscriptions/590f9815-4379-4568-a5e9-9dbe425b826f/resourceGroups/hannah.c.m.taino-RG/providers/Microsoft.ContainerRegistry/registries/mydockerakscontainer13580"}'
    dockerComposeFile: 'MyBasicWebApp/docker-compose.yml'
    action: 'Lock services'

- task: CopyFiles@2
  displayName: 'Copy Files to: deployment.yml'
  inputs:
    SourceFolder: deployment.yml
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    ArtifactName: deploy

stages:
- stage: 'Deploy'
  displayName: 'Deploy the containers'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Dev'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: deploy

- task: KubernetesManifest@1
  displayName: Create imagePullSecret
  inputs:
    action: createSecret
    connectionType: azureResourceManager
    secretName: $(imagePullSecret)
    dockerRegistryEndpoint: 'Container Registry Connection'
    azureSubscriptionConnection: 'Kubernetes Cluster Connection'
    azureResourceGroup: 'hannah.c.m.taino-RG'
    kubernetesCluster: 'MyDockerAKSBasicWebApp-13580'
    namespace: 'default'

- task: KubernetesManifest@1
  displayName: Deploy to Kubernetes cluster
  inputs:
    action: deploy
    connectionType: azureResourceManager
    azureSubscriptionConnection: 'Kubernetes Cluster Connection'
    azureResourceGroup: 'hannah.c.m.taino-RG'
    kubernetesCluster: 'MyDockerAKSBasicWebApp-13580'
    namespace: 'default'
    deploy: |
      $(Pipeline.Workspace)/manifests/deployment.yml
    imagePullSecrets: |
      $(imagePullSecret)
    containers: |
      $(RegistryName)/$(webRepository):$(Build.BuildId)